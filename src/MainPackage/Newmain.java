/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import Classes.centercorner;
import Classes.ClosableTabbedPane;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author ASAD
 */
public class Newmain extends javax.swing.JFrame {
public static Connection conn() throws ClassNotFoundException,SQLException
    {
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        String url="jdbc:odbc:precious";
        return DriverManager.getConnection(url,"sa","sa9" );
    }


Vector<Vector<String>> galloninfo =new Vector<Vector<String>>();
Vector<String>colname; 
Vector<Vector<String>> info =new Vector<Vector<String>>();
String numberpay;
Vector<String>header;
Vector<Vector<String>> del=new Vector<Vector<String>>();
Vector<Vector<String>> del1=new Vector<Vector<String>>();
//int number;
Connection con;
PreparedStatement ps;
ResultSet rs;
int finalval;
int totalamountpayment;
int totalamount;
int numberep;
int a ;
String ee;
centercorner center=new centercorner();
String cost;
int current;
String intial;
int oldtotalamount;
String olddue;
String oldtotal;
int finaltotalamount;
String value;
String paidamount;
int tablerec;
int tablebal;
String totalrec;
String totalbal;
int a2;
String number2;
String sign;
String cost2;
String payamnt;
String totalamnt;
int delpay;
int nun;
int gr;
int gd;
int gbal;
int totalgd;
Vector<Vector<String>> del3=new Vector<Vector<String>>();
Vector<Vector<String>> del2=new Vector<Vector<String>>();

int finaltotal;
    public Newmain() {
        initComponents();
        //jTable6.setCellSelectionEnabled(false);
        jTable6.setRowHeight(25);
        jTable5.setRowHeight(25);
        jTable1.setRowHeight(25);
        jTable3.setRowHeight(25);
        jTable2.setRowHeight(20);  
        jTable4.setRowHeight(19);
        gallontab.setRowHeight(19);
      
        
        jMenuBar1.requestFocusInWindow();
        jTable6.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable5.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable3.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jButton4.setEnabled(false);
        jButton3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton8.setEnabled(false);
        colname= new Vector<String>();
        colname.add("ACCOUNT NO");
        colname.add("CUSTOMER NAME");
        colname.add("DELIVERY NO");
        colname.add("GALLON DELIVERED");
        colname.add("GALLON RETURNED");
        colname.add("GALLON BALANCE");
        colname.add("DATE");
        header= new Vector<String>();
        header.add("ACCOUNT NO");
        header.add("PAYMENT NO");
        header.add("CUSTOMER NAME");       
        header.add("PAID PAYMENT");
        header.add("DATE");
        center.getCenteredCorner(jPanel3, addaccpanel);
        center.getscreenCenteredCorner(jPanel8);
        center.getscreenCenteredCorner(editppanel);
        jTabbedPane1.setVisible(false);
        center.getscreenCenteredCorner(this);
      //  this.setResizable(false);
        this.setExtendedState(MAXIMIZED_BOTH);
     
             try{
            con=conn();
        }
        catch(ClassNotFoundException| SQLException ex ){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        center.getscreenCenteredCorner(paypanel);
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DELETEACC = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        jTextField9 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        customerdata = new javax.swing.JPanel();
        cusname1 = new javax.swing.JLabel();
        confield = new javax.swing.JLabel();
        cusfiedl = new javax.swing.JLabel();
        conlable = new javax.swing.JLabel();
        acfiedl = new javax.swing.JLabel();
        addlable = new javax.swing.JLabel();
        pasmdas = new javax.swing.JScrollPane();
        gallontab = new javax.swing.JTable();
        gdlable = new javax.swing.JLabel();
        talable = new javax.swing.JLabel();
        dalable = new javax.swing.JLabel();
        palable = new javax.swing.JLabel();
        gdfield = new javax.swing.JLabel();
        tafield = new javax.swing.JLabel();
        dafiedl = new javax.swing.JLabel();
        pafiedlds = new javax.swing.JLabel();
        totallable = new javax.swing.JLabel();
        paymenttab = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        pc = new javax.swing.JLabel();
        gc = new javax.swing.JLabel();
        gb = new javax.swing.JLabel();
        grlable = new javax.swing.JLabel();
        gbfield = new javax.swing.JLabel();
        grfield = new javax.swing.JLabel();
        gallonbalancefield = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Address = new javax.swing.JTextArea();
        jComboBox6 = new javax.swing.JComboBox();
        addpay = new javax.swing.JPanel();
        paypanel = new javax.swing.JPanel();
        cusname = new javax.swing.JLabel();
        noaccount = new javax.swing.JLabel();
        pa = new javax.swing.JLabel();
        itemstate = new javax.swing.JLabel();
        PAYCOMBO = new javax.swing.JComboBox();
        input = new javax.swing.JTextField();
        enter = new javax.swing.JButton();
        addbot = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jComboBox5 = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        EDITACC = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        editgpanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        editppanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        addaccpanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        list = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        deltepay = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jComboBox8 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        delgal = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new ClosableTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        DELETEACC.setBackground(new java.awt.Color(255, 255, 255));
        DELETEACC.setName("DELETE ACCOUNT"); // NOI18N

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "DELETE ACCOUNT", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP));

        jLabel31.setText("ACCOUNT NO:");

        jLabel32.setText("CUSTOMER NAME:");

        jComboBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox7ItemStateChanged(evt);
            }
        });

        jTextField9.setEditable(false);
        jTextField9.setBackground(new java.awt.Color(255, 255, 255));
        jTextField9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton7.setText("DELETE ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton7KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField9)
                            .addComponent(jComboBox7, 0, 179, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(232, Short.MAX_VALUE)))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout DELETEACCLayout = new javax.swing.GroupLayout(DELETEACC);
        DELETEACC.setLayout(DELETEACCLayout);
        DELETEACCLayout.setHorizontalGroup(
            DELETEACCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        DELETEACCLayout.setVerticalGroup(
            DELETEACCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        customerdata.setBackground(new java.awt.Color(255, 255, 255));
        customerdata.setName("CUSTOMER DATA"); // NOI18N

        cusname1.setText("CUSTOMER NAME:");

        confield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cusfiedl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        conlable.setText("CONTACT:");

        acfiedl.setText("ACCOUNT NO:");

        addlable.setText("ADDRESS:");

        gallontab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        pasmdas.setViewportView(gallontab);

        gdlable.setText("GALLONS DELIVERED:");

        talable.setText("TOTAL AMOUNT:");

        dalable.setText("DUE AMOUNT:");

        palable.setText("PAID AMOUNT:");

        gdfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tafield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dafiedl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        pafiedlds.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        totallable.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        totallable.setText("TOTAL:");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        paymenttab.setViewportView(jTable4);

        pc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pc.setText("PAYMENT CHART");

        gc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        gc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gc.setText("GALLON CHART");

        gb.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        gb.setText("GALLON BALANCE:");

        grlable.setText("GALLONS RECEIVED:");

        gbfield.setText("GALLONS BALANCE:");

        grfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        gallonbalancefield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Address.setEditable(false);
        Address.setColumns(20);
        Address.setRows(5);
        Address.setBorder(null);
        Address.setFocusable(false);
        jScrollPane6.setViewportView(Address);

        jComboBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox6ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout customerdataLayout = new javax.swing.GroupLayout(customerdata);
        customerdata.setLayout(customerdataLayout);
        customerdataLayout.setHorizontalGroup(
            customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                .addContainerGap(398, Short.MAX_VALUE)
                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                        .addComponent(gc, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(374, 374, 374))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                        .addComponent(pc, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(369, 369, 369))))
            .addGroup(customerdataLayout.createSequentialGroup()
                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerdataLayout.createSequentialGroup()
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                                        .addComponent(addlable, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                                        .addComponent(acfiedl, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)))
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                                    .addComponent(jComboBox6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerdataLayout.createSequentialGroup()
                                        .addComponent(cusname1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(customerdataLayout.createSequentialGroup()
                                        .addComponent(conlable, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)))
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(confield, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(cusfiedl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(pasmdas, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(paymenttab))
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totallable, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(customerdataLayout.createSequentialGroup()
                                .addComponent(talable, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tafield, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(customerdataLayout.createSequentialGroup()
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dalable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(palable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dafiedl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pafiedlds, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 351, Short.MAX_VALUE)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerdataLayout.createSequentialGroup()
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(gbfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gdlable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(grlable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gdfield, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(gallonbalancefield, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(grfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(gb, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        customerdataLayout.setVerticalGroup(
            customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerdataLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cusname1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cusfiedl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(acfiedl, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(conlable)
                            .addComponent(confield, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addlable)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gc, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pasmdas, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymenttab, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(gb, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gdlable, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gallonbalancefield, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gbfield, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(customerdataLayout.createSequentialGroup()
                                .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(grlable, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                                    .addComponent(grfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gdfield, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(customerdataLayout.createSequentialGroup()
                        .addComponent(totallable, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pafiedlds, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(palable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dafiedl, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(dalable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerdataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tafield, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(talable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addpay.setBackground(new java.awt.Color(255, 255, 255));
        addpay.setName("ADD PAYMENT"); // NOI18N

        paypanel.setBackground(new java.awt.Color(255, 255, 255));
        paypanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ADD PAYMENT", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP));

        cusname.setText("CUSTOMER NAME:");

        noaccount.setText("ACCOUNT NO:");

        pa.setText("PAID AMOUNT:");

        itemstate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        PAYCOMBO.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PAYCOMBOItemStateChanged(evt);
            }
        });

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputKeyTyped(evt);
            }
        });

        enter.setText("ADD");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });
        enter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                enterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout paypanelLayout = new javax.swing.GroupLayout(paypanel);
        paypanel.setLayout(paypanelLayout);
        paypanelLayout.setHorizontalGroup(
            paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paypanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paypanelLayout.createSequentialGroup()
                        .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(noaccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cusname, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PAYCOMBO, 0, 239, Short.MAX_VALUE)
                            .addComponent(itemstate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(input, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );
        paypanelLayout.setVerticalGroup(
            paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paypanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PAYCOMBO, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(noaccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(itemstate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cusname, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addpayLayout = new javax.swing.GroupLayout(addpay);
        addpay.setLayout(addpayLayout);
        addpayLayout.setHorizontalGroup(
            addpayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paypanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        addpayLayout.setVerticalGroup(
            addpayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paypanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        addbot.setBackground(new java.awt.Color(255, 255, 255));
        addbot.setName("ADD INVOICES"); // NOI18N

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ADD BOTTELS", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP));
        jPanel10.setAlignmentX(86.0F);
        jPanel10.setAlignmentY(132.6F);
        jPanel10.setName("ADD INVOICE"); // NOI18N
        jPanel10.setPreferredSize(new java.awt.Dimension(444, 170));

        jComboBox5.setBorder(null);
        jComboBox5.setPreferredSize(new java.awt.Dimension(28, 20));
        jComboBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox5ItemStateChanged(evt);
            }
        });
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });
        jComboBox5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox5FocusLost(evt);
            }
        });

        jLabel27.setText("CUSTOMER NAME: ");

        jLabel28.setText("ADD GALLONS:");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField8KeyTyped(evt);
            }
        });

        jButton6.setText("ADD");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });

        jLabel29.setText("ACCOUNT NO:");

        jLabel30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox5, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addbotLayout = new javax.swing.GroupLayout(addbot);
        addbot.setLayout(addbotLayout);
        addbotLayout.setHorizontalGroup(
            addbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        addbotLayout.setVerticalGroup(
            addbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        EDITACC.setBackground(new java.awt.Color(255, 255, 255));
        EDITACC.setName("EDIT ACCOUNT"); // NOI18N
        EDITACC.setPreferredSize(new java.awt.Dimension(1040, 494));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "EDIT ACCOUNT", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP));

        jLabel22.setText("CONTACT:");

        jLabel23.setText("ADDRESS:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTextArea2);

        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });

        jTextField7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField7FocusLost(evt);
            }
        });
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField7KeyTyped(evt);
            }
        });

        jButton5.setText("ENTER");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton5KeyPressed(evt);
            }
        });

        jLabel24.setText("CUSTOMER NAME:");

        jLabel25.setText("RATE/GALLON:");

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel26.setText("ACCOUNT NO:");

        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField6)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField3)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout EDITACCLayout = new javax.swing.GroupLayout(EDITACC);
        EDITACC.setLayout(EDITACCLayout);
        EDITACCLayout.setHorizontalGroup(
            EDITACCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        EDITACCLayout.setVerticalGroup(
            EDITACCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        editgpanel.setBackground(new java.awt.Color(255, 255, 255));
        editgpanel.setName("EDIT BOTTELS"); // NOI18N

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jButton3.setText("EDIT GALLON");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });

        jButton4.setText("EDIT RETURNED GALLON");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel21.setText("ACCOUNT NO:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout editgpanelLayout = new javax.swing.GroupLayout(editgpanel);
        editgpanel.setLayout(editgpanelLayout);
        editgpanelLayout.setHorizontalGroup(
            editgpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        editgpanelLayout.setVerticalGroup(
            editgpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        editppanel.setBackground(new java.awt.Color(255, 255, 255));
        editppanel.setName("EDIT PAYMENT"); // NOI18N

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setName("EDIT PAYMENT"); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jTable1.setRequestFocusEnabled(false);
        jTable1.setUpdateSelectionOnSort(false);
        jTable1.setVerifyInputWhenFocusTarget(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jLabel20.setText("ACCOUNT NO:");

        jButton2.setText("EDIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 341, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout editppanelLayout = new javax.swing.GroupLayout(editppanel);
        editppanel.setLayout(editppanelLayout);
        editppanelLayout.setHorizontalGroup(
            editppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        editppanelLayout.setVerticalGroup(
            editppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editppanelLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addaccpanel.setBackground(new java.awt.Color(255, 255, 255));
        addaccpanel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        addaccpanel.setName("ADD ACCOUNT"); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ADD ACCOUNT", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP, null, new java.awt.Color(51, 51, 51)));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel5.setText("CONTACT:");

        jLabel6.setText("ADDRESS:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "030", "031", "032", "033", "034" }));

        jTextField4.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jTextField5.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField5FocusLost(evt);
            }
        });
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jButton1.setText("ENTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jLabel1.setText("CUSTOMER NAME:");

        jLabel2.setText("RATE/GALLON:");

        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel3.setText("DEPOSIT:");

        jTextField2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("-");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addaccpanelLayout = new javax.swing.GroupLayout(addaccpanel);
        addaccpanel.setLayout(addaccpanelLayout);
        addaccpanelLayout.setHorizontalGroup(
            addaccpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        addaccpanelLayout.setVerticalGroup(
            addaccpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        list.setBackground(new java.awt.Color(255, 255, 255));
        list.setName("LIST OF CUSTOMERS"); // NOI18N

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setText("TOTAL:");

        jLabel12.setText("GALLONS DELIVERED:");

        jLabel13.setText("PAID AMOUNT:");

        jLabel14.setText("DUE AMOUNT:");

        jLabel15.setText("TOTAL AMOUNT:");

        jLabel16.setText("GALLONS RECIEVED:");

        jLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setText("GALLONS BALANCE:");

        jLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton10.setText("REFRESH");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton10))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout listLayout = new javax.swing.GroupLayout(list);
        list.setLayout(listLayout);
        listLayout.setHorizontalGroup(
            listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        listLayout.setVerticalGroup(
            listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deltepay.setBackground(new java.awt.Color(255, 255, 255));
        deltepay.setName("DELETE PAYMENT"); // NOI18N

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox8ItemStateChanged(evt);
            }
        });

        jLabel33.setText("ACCOUNT NO :");

        jButton8.setText("DELETE ");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton8KeyPressed(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout deltepayLayout = new javax.swing.GroupLayout(deltepay);
        deltepay.setLayout(deltepayLayout);
        deltepayLayout.setHorizontalGroup(
            deltepayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deltepayLayout.createSequentialGroup()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        deltepayLayout.setVerticalGroup(
            deltepayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        delgal.setBackground(new java.awt.Color(255, 255, 255));
        delgal.setName("DELETE INVOICES"); // NOI18N

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));

        jLabel34.setText("ACCOUNT NO :");

        jComboBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox9ItemStateChanged(evt);
            }
        });

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable6MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTable6);

        jButton9.setText("DELETE");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jButton9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton9KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout delgalLayout = new javax.swing.GroupLayout(delgal);
        delgal.setLayout(delgalLayout);
        delgalLayout.setHorizontalGroup(
            delgalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        delgalLayout.setVerticalGroup(
            delgalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTree1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTree1.setForeground(new java.awt.Color(255, 255, 255));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("MENU");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("ADD");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ADD ACCOUNT");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ADD INVOICES");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ADD PAYMENT");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("EDIT");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("EDIT ACCOUNT");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("EDIT PAYMENT");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("EDIT GALLONS");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("VIEW");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("CUSTOMER DATA");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("LIST OF CUSTOMERS");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("DELETE");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ACCOUNT");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("CUSTOMER DATA");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("DELETE PAYMENT");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("DELETE GALLONS");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("PRINT");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RECIEPT");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("CUSTOMER REPORTS");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("MONTHLY REPORTS");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("OVERALL REPORTS");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTree1KeyPressed(evt);
            }
        });
        jScrollPane9.setViewportView(jTree1);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbedPane1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(200, 22));

        jMenu1.setText("ADD");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511079_Add-Male-User.png"))); // NOI18N
        jMenuItem3.setText("ADD ACCOUNT");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenuItem3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem3KeyPressed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413510064_gallon____1413492157_69920__1413492157_59187.png"))); // NOI18N
        jMenuItem4.setText("ADD BOTTELS");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511386_kwallet.png"))); // NOI18N
        jMenuItem5.setText("ADD PAYMENT");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("EDIT");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511602_edit-01-24.png"))); // NOI18N
        jMenuItem7.setText("EDIT PAYMENT");
        jMenuItem7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jMenuItem7ItemStateChanged(evt);
            }
        });
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511602_edit-01-24.png"))); // NOI18N
        jMenuItem14.setText("EDIT CUSTOMER DATA");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem14);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511602_edit-01-24.png"))); // NOI18N
        jMenuItem6.setText("EDIT BOTTELS");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("VIEW");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413509779_User.png"))); // NOI18N
        jMenuItem13.setText("CUSTOMER DATA");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511723_Supervisor.png"))); // NOI18N
        jMenuItem12.setText("LIST OF CUSTOMERS");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("DELETE");
        jMenu4.setBorderPainted(true);
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413512634_Remove-Male-User.png"))); // NOI18N
        jMenuItem8.setText("DELETE ACCOUNT");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413512467_editor_trash_delete_recycle_bin_-24.png"))); // NOI18N
        jMenu7.setText("DELETE CUSTOMER DATA");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("DELETE PAYMENT");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("DELETE BOTTELS");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenu4.add(jMenu7);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("PRINT");
        jMenu5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenu5.setIconTextGap(5);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413511966_Cash_register.png"))); // NOI18N
        jMenuItem11.setText("PRINT RECEIPT");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1413512092_681117-Sheet-24.png"))); // NOI18N
        jMenu6.setText("PRINT CUSTOMER REPORT");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem2.setText("MONTHLY REPORTS");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem1.setText("OVERALL REPORTS");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem1);

        jMenu5.add(jMenu6);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jComboBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox7ItemStateChanged
        try{
            String sql="select [CUSTOMER NAME] from data where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+"";
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            while (rs.next()) {
                jTextField9.setText(rs.getString(1));
            }
        }
        catch(SQLException ex)
        {

        }
    }//GEN-LAST:event_jComboBox7ItemStateChanged
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int value=   JOptionPane.showConfirmDialog(paypanel, "ARE YOU SURE YOU WANT DELETE SELECTED ACCOUNT?", "CONFIRMATION", JOptionPane.YES_NO_OPTION);
        if (value==0) {
            try{
                String sql="delete from table_1 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data2 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data3 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+"";
                ps=con.prepareStatement(sql);
                ps.execute();
                JOptionPane.showMessageDialog(paypanel, "DELETED SUCCESSFULLY");
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());

            }
            jComboBox7.removeAllItems();
            jTextField9.setText(null);
            try{
                ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
                rs=ps.executeQuery();
                while(rs.next()){
                    jComboBox7.addItem(rs.getString(1));
                }
            }
            catch(SQLException ex){
            }
            try{
                String sql="select [CUSTOMER NAME] from data where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+"";
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                while (rs.next()) {
                    jTextField9.setText(rs.getString(1));
                }
            }
            catch(SQLException ex)
            {

            }
        }

    }//GEN-LAST:event_jButton7ActionPerformed
    private void jComboBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox6ItemStateChanged
        confield.setText(null);
        cusfiedl.setText(null);
        Address.setText(null);
        tafield.setText(null);
        pafiedlds.setText(null);
        dafiedl.setText(null);
        gdfield.setText(null);
        grfield.setText(null);
        gallonbalancefield.setText(null);
        try{
            ps=con.prepareStatement("SELECT * FROM DATA where [ACCOUNT NO]="+jComboBox6.getSelectedItem()+"");
            rs=ps.executeQuery();
            while(rs.next()){
                cusfiedl.setText(rs.getString(2));
                confield.setText(rs.getString(3));
                Address.setText(rs.getString(4));
            }
            ps=con.prepareStatement("select * from data2 where [ACCOUNT NO]="+jComboBox6.getSelectedItem()+" ORDER BY [DELIVERY NO] ASC");
            rs=ps.executeQuery();
            gallontab.setModel(DbUtils.resultSetToTableModel(rs));
            gallontab.setEnabled(false);
            ps=con.prepareStatement("select * from data3 where [ACCOUNT NO]="+jComboBox6.getSelectedItem()+" ORDER BY [PAYMENT NO] ASC");
            rs=ps.executeQuery();
            jTable4.setModel(DbUtils.resultSetToTableModel(rs));
            jTable4.setEnabled(false);
            ps=con.prepareStatement("Select  [GALLON DELIVERED] ,[TOTAL AMOUNT] ,[DUE AMOUNT] ,[PAID AMOUNT],[GALLON RECIEVED],[GALLON BALANCE] from table_1 where [ACCOUNT NO]="+jComboBox6.getSelectedItem()+"");
            rs=ps.executeQuery();
            while(rs.next()){
                gallonbalancefield.setText(rs.getString(1));
                tafield.setText(rs.getString(2));
                dafiedl.setText(rs.getString(3));
                pafiedlds.setText(rs.getString(4));
                grfield.setText(rs.getString(5));
                gdfield.setText(rs.getString(6));
            }
        }
        catch(SQLException ex){

        }
    }//GEN-LAST:event_jComboBox6ItemStateChanged
    private void PAYCOMBOItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PAYCOMBOItemStateChanged
        try{
            ps=con.prepareStatement("select [CUSTOMER NAME] from table_1 where [ACCOUNT NO]='"+PAYCOMBO.getSelectedItem()+"'");
            rs=ps.executeQuery();
            while(rs.next()){
                itemstate.setText(rs.getString(1));
            }

        }
        catch(SQLException ex){

            itemstate.setText(null);
        }
    }//GEN-LAST:event_PAYCOMBOItemStateChanged
    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
      
    }//GEN-LAST:event_inputActionPerformed
    private void inputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyTyped
          if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
        if (Character.isSpaceChar(evt.getKeyChar())) {
        evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_inputKeyTyped
    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
        if (PAYCOMBO.getSelectedItem()==null) {
            JOptionPane.showMessageDialog(paypanel, "PLEASE SELECT ACCOUNT NO FIRST");
        }
    else{
    try{
            ps=con.prepareStatement(" select top 1 [PAYMENT NO] from DATA3 where [ACCOUNT NO]='"+PAYCOMBO.getSelectedItem()+"'  order by [PAYMENT NO] DESC ");
            rs=ps.executeQuery();
            while(rs.next()){
                numberpay=(rs.getString(1));}
        }
    catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
        }

        if (numberpay==null) {
            if(input.getText().equals("")){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER PAID AMOUNT ");
            }
            else if(Integer.parseInt(input.getText())<0){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID PAID AMOUNT");
            }
            else{
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+PAYCOMBO.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);
                    }
                    if(Integer.parseInt(sign)<0){
                        if(Integer.parseInt(sign)<Integer.parseInt(input.getText())){
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                            );

                            ps.execute();
                        }
                        else{
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]+"+input.getText()+") where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+PAYCOMBO.getSelectedItem()+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                            );
                        }
                    }
                    else{
                        ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                            +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                        );
                        ps.execute();
                        
                    }
                   
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
//                    input.setText(null);
                }
            }
             JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY ");
            input.setText(null);
        }
        else {
            a=Integer.parseInt(numberpay)+1;
            if(input.getText().equals("")){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER PAID AMOUNT ");
            }
            else if(Integer.parseInt(input.getText())<0){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID PAID AMOUNT");
            }
            else{
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+PAYCOMBO.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);
                    }
                    if(Integer.parseInt(sign)<0){
                        if(Integer.parseInt(sign)<Integer.parseInt(input.getText())){
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                            );

                            ps.execute();
                        }
                        else{
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]+"+input.getText()+") where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+PAYCOMBO.getSelectedItem()+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                            );
                            ps.execute();
                        }
                    }
                    else{
                        ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                            +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                        );
                        ps.execute();
                       
                    }
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());}
            JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY ");
                        input.setText(null);
            }
         
                     
        }
    }
    }//GEN-LAST:event_enterActionPerformed
    private void enterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterKeyPressed
 if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            if (PAYCOMBO.getSelectedItem()==null) {
            JOptionPane.showMessageDialog(paypanel, "PLEASE SELECT ACCOUNT NO FIRST");
        }
    else{
    try{
            ps=con.prepareStatement(" select top 1 [PAYMENT NO] from DATA3 where [ACCOUNT NO]='"+PAYCOMBO.getSelectedItem()+"'  order by [PAYMENT NO] DESC ");
            rs=ps.executeQuery();
            while(rs.next()){
                numberpay=(rs.getString(1));}
        }
    catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
        }

        if (numberpay==null) {
            if(input.getText().equals("")){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER PAID AMOUNT ");
            }
            else if(Integer.parseInt(input.getText())<0){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID PAID AMOUNT");
            }
            else{
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+PAYCOMBO.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);
                    }
                    if(Integer.parseInt(sign)<0){
                        if(Integer.parseInt(sign)<Integer.parseInt(input.getText())){
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                            );

                            ps.execute();
                        }
                        else{
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]+"+input.getText()+") where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+PAYCOMBO.getSelectedItem()+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                            );
                        }
                    }
                    else{
                        ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                            +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),1)"
                        );
                        ps.execute();
                        
                    }
                   
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
//                    input.setText(null);
                }
            }
             JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY ");
            input.setText(null);
        }
        else {
            a=Integer.parseInt(numberpay)+1;
            if(input.getText().equals("")){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER PAID AMOUNT ");
            }
            else if(Integer.parseInt(input.getText())<0){
                JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID PAID AMOUNT");
            }
            else{
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+PAYCOMBO.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);
                    }
                    if(Integer.parseInt(sign)<0){
                        if(Integer.parseInt(sign)<Integer.parseInt(input.getText())){
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                            );

                            ps.execute();
                        }
                        else{
                            ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]+"+input.getText()+") where [ACCOUNT NO]='"+(PAYCOMBO.getSelectedItem())+"'"
                                +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                                +"VALUES('"+PAYCOMBO.getSelectedItem()+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                            );
                            ps.execute();
                        }
                    }
                    else{
                        ps=con.prepareStatement("update Table_1 set [PAID AMOUNT]=([PAID AMOUNT]+'"+input.getText()+"') where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"update Table_1 set [DUE AMOUNT]=([DUE AMOUNT]-"+input.getText()+") where [ACCOUNT NO]='"+String.valueOf(PAYCOMBO.getSelectedItem())+"'"
                            +"INSERT INTO DATA3 ([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                            +"VALUES('"+(PAYCOMBO.getSelectedItem())+"','"+input.getText()+"','"+itemstate.getText()+"',getdate(),'"+a+"')"
                        );
                        ps.execute();
                       
                    }
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());}
            JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY ");
                        input.setText(null);
            }
         
                     
        }
        input.requestFocusInWindow();
    }
            
        }        
    }//GEN-LAST:event_enterKeyPressed
    private void jComboBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox5ItemStateChanged

        try{
            ps=con.prepareStatement("select [CUSTOMER NAME] from table_1 where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"'");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel30.setText(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
    }//GEN-LAST:event_jComboBox5ItemStateChanged
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed

    }//GEN-LAST:event_jComboBox5ActionPerformed
    private void jComboBox5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox5FocusLost
    }//GEN-LAST:event_jComboBox5FocusLost
    private void jTextField8KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
          if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
        
    }//GEN-LAST:event_jTextField8KeyTyped
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (jComboBox5.getSelectedItem()==null) {
           JOptionPane.showMessageDialog(paypanel, "PLEASE SELECT ACCOUNT NO");
        }
        else if (jTextField8.getText().equals("")) {
             JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else{ 
        try{
            ps=con.prepareStatement(" select top 1 [DELIVERY NO] from DATA2 where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"'  order by [DELIVERY NO] DESC ");
            rs=ps.executeQuery();
            while(rs.next()){
                number2=(rs.getString(1));}
        } catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());

        }
        if (number2==null) {
           

                try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"' ");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost2=rs.getString(1);
                    }
                    
                }

                catch(SQLException ex){
                     JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());

                }
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+jComboBox5.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);

                    }
                    if(Integer.parseInt(sign)<0){
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"update Table_1 set [due amount]="+total+"+[DUE AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),1)");
                        ps.execute();
                    }
                    else{
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [due amount]=[TOTAL AMOUNT]-[PAID AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),1)");
                        ps.execute();
                    }
                }
                catch(SQLException ex){
                     JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
                }
                 JOptionPane.showMessageDialog(rootPane,"ADDED SUCESSFULLY");
        jTextField8.setText(null);
            }
        
        else{
            a2=Integer.parseInt(number2)+1;


            

            

                try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"' ");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost2=rs.getString(1);
                    }
                }
                catch(SQLException ex){
                    // JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());

                }
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+jComboBox5.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);

                    }
                    if(Integer.parseInt(sign)<0){
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"update Table_1 set [due amount]="+total+"+[DUE AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),"+a2+")");
                        ps.execute();
                    }
                    else{
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [due amount]=[TOTAL AMOUNT]-[PAID AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),"+a2+")");
                        ps.execute();

                    }
                   
                }

                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
                    

                }
             JOptionPane.showMessageDialog(rootPane,"ADDED SUCESSFULLY");
        jTextField8.setText(null);
        }
      jTextField8.requestFocusInWindow();
        }
         
    }//GEN-LAST:event_jButton6ActionPerformed
    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            evt.consume();
        if (jComboBox5.getSelectedItem()==null) {
           JOptionPane.showMessageDialog(paypanel, "PLEASE SELECT ACCOUNT NO");
        }
        else if (jTextField8.getText().equals("")) {
             JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else{ 
        try{
            ps=con.prepareStatement(" select top 1 [DELIVERY NO] from DATA2 where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"'  order by [DELIVERY NO] DESC ");
            rs=ps.executeQuery();
            while(rs.next()){
                number2=(rs.getString(1));}
        } catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());

        }
        if (number2==null) {
           

                try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"' ");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost2=rs.getString(1);
                    }
                    
                }

                catch(SQLException ex){
                     JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());

                }
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+jComboBox5.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);

                    }
                    if(Integer.parseInt(sign)<0){
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"update Table_1 set [due amount]="+total+"+[DUE AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),1)");
                        ps.execute();
                    }
                    else{
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [due amount]=[TOTAL AMOUNT]-[PAID AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),1)");
                        ps.execute();
                    }
                }
                catch(SQLException ex){
                     JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
                }
                 JOptionPane.showMessageDialog(rootPane,"ADDED SUCESSFULLY");
        jTextField8.setText(null);
            }
        
        else{
            a2=Integer.parseInt(number2)+1;


            

            

                try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA where [ACCOUNT NO]='"+jComboBox5.getSelectedItem()+"' ");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost2=rs.getString(1);
                    }
                }
                catch(SQLException ex){
                    // JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());

                }
                try{
                    ps=con.prepareStatement("select [DUE AMOUNT] from table_1 where [ACCOUNT NO]="
                        + "'"+jComboBox5.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        sign=rs.getString(1);

                    }
                    if(Integer.parseInt(sign)<0){
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"update Table_1 set [due amount]="+total+"+[DUE AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),"+a2+")");
                        ps.execute();
                    }
                    else{
                        int total=(Integer.parseInt(jTextField8.getText())) *  Integer.parseInt(cost2);
                        ps=con.prepareStatement("update Table_1 set [GALLON DELIVERED]=([GALLON DELIVERED]+"+jTextField8.getText()+") where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [total amount]=[total amount]+"+(total)+" where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +"update Table_1 set [due amount]=[TOTAL AMOUNT]-[PAID AMOUNT] where [ACCOUNT NO]='"+(jComboBox5.getSelectedItem())+"'"
                            +""
                            +"update Table_1 set[GALLON BALANCE]=([GALLON DELIVERED]-[GALLON RECIEVED])"
                            +"INSERT INTO DATA2 ([ACCOUNT NO],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[CUSTOMER NAME],[DATE],[DELIVERY NO])"
                            +"VALUES('"+(jComboBox5.getSelectedItem())+"','"+jTextField8.getText()+"','','"+jTextField8.getText()+"','"+jLabel30.getText()+"',getdate(),"+a2+")");
                        ps.execute();

                    }
                   
                }

                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane,ex.getLocalizedMessage());
                    

                }
             JOptionPane.showMessageDialog(rootPane,"ADDED SUCESSFULLY");
        jTextField8.setText(null);
        }
      
        }
         jTextField8.requestFocusInWindow();
        }
    }//GEN-LAST:event_jButton6KeyPressed
    private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_TAB) {
            jTextField1.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextArea2KeyPressed
    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        if ( Character.isDigit(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
    }//GEN-LAST:event_jTextField6KeyTyped
    private void jTextField7FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField7FocusLost

    }//GEN-LAST:event_jTextField7FocusLost
    private void jTextField7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
         if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField7KeyTyped
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jTextField6.getText().equals("") || jTextField7.getText().equals("") || jTextField3.getText().equals("") || jTextArea2.getText().equals("") ) {
            JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else if (!(jTextField7.getText().length()==11)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID CONTACT NUMBER");
        }
        else  {
            try{
                ps=con.prepareStatement("UPDATE DATA SET [CUSTOMER NAME]='"+jTextField6.getText()+"',[CONTACT]='"+jTextField7.getText()+"',[ADDRESS]='"+jTextArea2.getText()+"',[RATE/GALLON]="+jTextField3.getText()+""
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE table_1 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE DATA2 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE DATA3 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                );
                ps.execute();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }
            JOptionPane.showMessageDialog(paypanel, "EDIT SUCCESSFULLY");
            jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField5.setText(null);
            jTextArea2.setText(null);
            jTextField3.setText(null);
            jComboBox4.setSelectedItem(null);
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    private void jButton5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton5KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
           if (jTextField6.getText().equals("") || jTextField7.getText().equals("") || jTextField3.getText().equals("") || jTextArea2.getText().equals("") ) {
            JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else if (!(jTextField7.getText().length()==11)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID CONTACT NUMBER");
        }
        else  {
            try{
                ps=con.prepareStatement("UPDATE DATA SET [CUSTOMER NAME]='"+jTextField6.getText()+"',[CONTACT]='"+jTextField7.getText()+"',[ADDRESS]='"+jTextArea2.getText()+"',[RATE/GALLON]="+jTextField3.getText()+""
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE table_1 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE DATA2 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                    +"UPDATE DATA3 SET [CUSTOMER NAME]='"+jTextField6.getText()+"'"
                    +"WHERE [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'"
                );
                ps.execute();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }
             JOptionPane.showMessageDialog(rootPane, "EDIT SUCCESSFULLY");
            jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField5.setText(null);
            jTextArea2.setText(null);
            jTextField3.setText(null);
            jComboBox4.setSelectedItem(null);
        }  
        }
  
    }//GEN-LAST:event_jButton5KeyPressed
    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
         if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField3KeyTyped
    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        try{
            ps=con.prepareStatement("select * from data where [ACCOUNT NO]='"+jComboBox4.getSelectedItem()+"'");
            rs=ps.executeQuery();
            while(rs.next()){
                jTextField6.setText(rs.getString(2));
                jTextField7.setText(rs.getString(3));
                jTextArea2.setText(rs.getString(4));
                jTextField3.setText(rs.getString(5));
            }
        }
        catch(SQLException ex){
        }

    }//GEN-LAST:event_jComboBox4ItemStateChanged
    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        if((jTable3.getSelectedRow()>=0)){
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
    }//GEN-LAST:event_jTable3MouseClicked
    private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_TAB){
            evt.consume();
            jButton1.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTable3KeyPressed
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        value=JOptionPane.showInputDialog("ENTER NO OF GALLON");
        if (!(value==null)) {
           if (!(value.matches("\\d+"))){
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else if (Integer.parseInt(String.valueOf(jTable3.getValueAt(jTable3.getSelectedRow(), 4)))>Integer.parseInt(value)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else{
            int old=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString());
            String sql1="UPDATE DATA2 SET [GALLON DELIVERED]="+value+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" AND [DELIVERY NO]="+jTable3.getValueAt(jTable3.getSelectedRow(), 2)+"";
            String sql2="UPDATE DATA2 SET [GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" AND [DELIVERY NO]="+jTable3.getValueAt(jTable3.getSelectedRow(), 2)+"";
            String tab1="select [GALLON DELIVERED] from table_1 where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'";
            String tab3="UPDATE table_1 SET [GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" ";
            try{
            ps=con.prepareStatement(sql1);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"1");
            }
            try{
            ps=con.prepareStatement(sql2);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"2");
            }
            try{
            ps=con.prepareStatement(tab1);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    intial=rs.getString(1);
                }
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"3");
            }
            finalval=(Integer.parseInt(intial)-old)+Integer.parseInt(value);
            //JOptionPane.showMessageDialog(paypanel, finalval);
            try{
            ps=con.prepareStatement("UPDATE table_1 SET [GALLON DELIVERED]="+finalval+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
            }
            try{
            ps=con.prepareStatement(tab3);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"5");
            }
            
             try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
                        + "where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost=rs.getString(1);
                    }
            }
                  catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
                }
                 try{
                    ps=con.prepareStatement("select [TOTAL AMOUNT] from table_1  "
                        + "where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                       oldtotal=rs.getString(1);
                    }
                }
                  catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
                }
                int zz=Integer.parseInt(cost)*Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString());
//                JOptionPane.showMessageDialog(paypanel, zz);
                int zz1=Integer.parseInt(cost)*Integer.parseInt(value);
//                JOptionPane.showMessageDialog(paypanel, zz1);
                int afterminus=(Integer.parseInt(oldtotal)-zz)+zz1;
//                JOptionPane.showMessageDialog(paypanel, afterminus);
                try{
                ps=con.prepareStatement("UPDATE table_1 SET [TOTAL AMOUNT]="+afterminus+" "
                        + "WHERE [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
                ps.execute();
                
                }
                catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"7");
                
                }
                try{
                 ps=con.prepareStatement("UPDATE table_1 SET [DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT] "
                        + "WHERE [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
                ps.execute();
                
                }
                catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"8");
                
                }
                jTable3.setValueAt(value,jTable3.getSelectedRow(), 3);  
                jTable3.setValueAt(Integer.parseInt(value)-Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString()),jTable3.getSelectedRow(),  5);
             JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY");
            }   
                
                
       
            

//           
//            if (Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString()) == 0) {
//                jTable3.setValueAt(value, jTable3.getSelectedRow(), 5);
//                try{
//                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        cost=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//                }
//                try{
//                    ps=con.prepareStatement("select [TOTAL AMOUNT],[DUE AMOUNT],[PAID AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "");
//                    rs=ps.executeQuery();
//                    while (rs.next()) {
//                        oldtotal=rs.getString(1);
//                        olddue=rs.getString(2);
//                        paidamount=rs.getString(3);
//                    }
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
//                }
//
//                try{
//                    ps=con.prepareStatement("UPDATE DATA2 SET [GALLON DELIVERED]="+value+",[GALLON BALANCE]="+value+" WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"' AND [DELIVERY NO]="+jTable3.getSelectedRow()+"+1");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                try{
//                    ps=con.prepareStatement("select [GALLON DELIVERED] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                    );
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        intial=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//                }
//
//                current=Integer.parseInt(intial)-old;
//                totalamount=Integer.parseInt(cost)* Integer.parseInt(value);
//                oldtotalamount=Integer.parseInt(cost)* old;
//                finaltotalamount=(Integer.parseInt(oldtotal)-oldtotalamount)+totalamount;
//                try{
//                    ps=con.prepareStatement("UPDATE table_1 set [GALLON DELIVERED]="+current+"+"+Integer.parseInt(value)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "UPDATE table_1 set [GALLON BALANCE]="+value+",[TOTAL AMOUNT]="+finaltotalamount+",[DUE AMOUNT]="+finaltotalamount+"-"+Integer.parseInt(paidamount)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage() );
//                }
//            }
//            //when some gallon is recieved
//
//            else{
//                int balance=Integer.parseInt(value)-Integer.parseInt(String.valueOf(jTable3.getValueAt(jTable3.getSelectedRow(), 3)));
//                jTable3.setValueAt(balance, jTable3.getSelectedRow(), 5);
//                try{
//                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        cost=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//                }
//                try{
//                    ps=con.prepareStatement("select [TOTAL AMOUNT],[DUE AMOUNT],[PAID AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "");
//                    rs=ps.executeQuery();
//                    while (rs.next()) {
//                        oldtotal=rs.getString(1);
//                        olddue=rs.getString(2);
//                        paidamount=rs.getString(3);
//                    }
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
//                }
//                try{
//                    ps=con.prepareStatement("UPDATE DATA2 SET [GALLON DELIVERED]="+value+",[GALLON BALANCE]="+value+"-"+jTable3.getValueAt(jTable3.getSelectedRow(), 4)+" WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"' AND [DELIVERY NO]="+jTable3.getSelectedRow()+"+1");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                try{
//                    ps=con.prepareStatement("select [GALLON DELIVERED] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                    );
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        intial=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//                }
//
//                current=Integer.parseInt(intial)-old;
//                totalamount=Integer.parseInt(cost)* Integer.parseInt(value);
//                oldtotalamount=Integer.parseInt(cost)* old;
//                finaltotalamount=(Integer.parseInt(oldtotal)-oldtotalamount)+totalamount;
//                try{
//                    ps=con.prepareStatement("UPDATE table_1 set [GALLON DELIVERED]="+current+"+"+Integer.parseInt(value)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "UPDATE table_1 set [GALLON BALANCE]=[GALLON DELIVERED]-"+jTable3.getValueAt(jTable3.getSelectedRow(), 3)+",[TOTAL AMOUNT]="+finaltotalamount+",[DUE AMOUNT]="+finaltotalamount+"-"+Integer.parseInt(paidamount)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage() );
//                }
//            }
//            JOptionPane.showMessageDialog(paypanel, "EDIT SUCCESSFULLY");
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String value2=JOptionPane.showInputDialog("ENTER NO OF RETURNED GALLON");
    
        if (!(value2.matches("\\d+"))){
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        
        
        
      else if (Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString())<Integer.parseInt(value2)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else{
            try{
                String sql="SELECT [GALLON BALANCE],[GALLON RECIEVED] FROM table_1 where"
                + "[CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                while(rs.next()){
                    totalbal=rs.getString(1);
                    totalrec=rs.getString(2);
                }
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
            }
//            int oldbac=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 5).toString());
//            int oldrec=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString());
            int bal=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString())-Integer.parseInt(value2);
            try{
                String sql="UPDATE DATA2 SET "
                + "[GALLON RECIEVED]="+value2+","
                + "[GALLON BALANCE]="+bal+""
                + "WHERE [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"' AND "
                + "[DELIVERY NO]="+jTable3.getSelectedRow()+"+1";
                ps=con.prepareStatement(sql);
                ps.execute();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"5");
            }
            int a=Integer.parseInt(totalrec);
//            JOptionPane.showMessageDialog(paypanel, a);
            int b=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString());
//            JOptionPane.showMessageDialog(paypanel, b);
            int c=Integer.parseInt(value2);
//            JOptionPane.showMessageDialog(paypanel, c);
            int finalrec=(a-b)+c;
//            JOptionPane.showMessageDialog(paypanel, finalrec);
            String table1sql1="UPDATE table_1 "
                    + "SET [GALLON RECIEVED]="+finalrec+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"";
            String table1sql2="UPDATE table_1 SET [GALLON BALANCE] = [GALLON DELIVERED]- [GALLON RECIEVED]"
                            + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"";
         try{
        ps=con.prepareStatement(table1sql1);
        ps.execute();
         }
         catch(SQLException ex){
         JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"table1sql1");
                 
         }
          try{
        ps=con.prepareStatement(table1sql2);
        ps.execute();
         }
         catch(SQLException ex){
         JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"table1sql2");
                 
         }
        jTable3.setValueAt(value2, jTable3.getSelectedRow(), 4);
        jTable3.setValueAt(bal, jTable3.getSelectedRow(), 5);  

//            if (Integer.parseInt(totalrec)==0) {
//                try{
//                    String sql="UPDATE table_1 SET "
//                    + "[GALLON RECIEVED]=[GALLON RECIEVED]+"+value2+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//
//                }
//                try{
//                    String sql="UPDATE table_1 SET"
//                    + "[GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                }
//            else{
//                int aftereditrec=(Integer.parseInt(totalbal)-oldbac)+Integer.parseInt(value2);
//                int aftereditbal=(Integer.parseInt(totalrec)-oldrec)+bal;
//                try{
//                    String sql="UPDATE table_1 SET "
//                    + "[GALLON RECIEVED]="+aftereditrec+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"2");
//                }
//                try{
//                    String sql="UPDATE table_1 SET"
//                    + "[GALLON BALANCE]="+aftereditbal+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//
//                }
//            }
        JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY");
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        
    }//GEN-LAST:event_jComboBox3ItemStateChanged
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
       jButton4.setEnabled(false);
        jButton3.setEnabled(false);
        galloninfo.removeAllElements();
        try{
            ps=con.prepareStatement("select * from data2 where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" ORDER BY [DELIVERY NO] ASC");
            rs=ps.executeQuery();
            while(rs.next()){
                Vector<String>infog=new Vector<String>();
                infog.add(rs.getString(1));
                infog.add(rs.getString(2));
                infog.add(rs.getString(3));
                infog.add(rs.getString(4));
                infog.add(rs.getString(5));
                infog.add(rs.getString(6));
                infog.add(rs.getString(7));
                galloninfo.add(infog);
            }
        }
        catch(SQLException ex){

        }

        jTable3.setModel(new DefaultTableModel(
            galloninfo,colname
        )

        {
            public boolean isCellEditable(int row ,int column){
                return false;
            }
        } );
    }//GEN-LAST:event_jComboBox3ActionPerformed
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if((jTable1.getSelectedRow()>=0)){
            jButton2.setEnabled(true);}
    }//GEN-LAST:event_jTable1MouseClicked
    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_TAB){
            evt.consume();
            jButton1.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTable1KeyPressed
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String value=JOptionPane.showInputDialog("ENTER PAYMENT");
        if (!(value.matches("\\d+"))) {
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else{
            int old=Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            jTable1.setValueAt(value, jTable1.getSelectedRow(), 3);

            try{
                ps=con.prepareStatement("UPDATE DATA3 SET [PAID AMOUNT]="+value+""
                + "where ([PAYMENT NO]="+jTable1.getValueAt(jTable1.getSelectedRow(), 1)+") AND ([CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 2)+"')");
                ps.execute();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
            }
            try{
                ps=con.prepareStatement("select [PAID AMOUNT],[TOTAL AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 2)+"'");
                rs=ps.executeQuery();
                while(rs.next()){
                    ee=rs.getString(1);
                    totalamountpayment=Integer.parseInt(rs.getString(2));
                }
                a=Integer.parseInt(ee)-old;
                int dueamount=totalamountpayment-(a+Integer.parseInt(value));
                ps=con.prepareStatement("UPDATE table_1 SET [PAID AMOUNT]="+a+"+"+Integer.parseInt(value)+""
                    + "where [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 2)+"'"
                    + "UPDATE table_1 SET [DUE AMOUNT]="+dueamount+""
                    + "WHERE [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 2)+"'");
                ps.execute();
            }

            catch(SQLException ex)
            {
            }
            JOptionPane.showMessageDialog(rootPane, "EDIT SCUCCESSFULLY");
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            String value=JOptionPane.showInputDialog("ENTER PAYMENT");
            if (!(value.matches("\\d+"))) {
                JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
            }
            else{
                int old=Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
                jTable1.setValueAt(value, jTable1.getSelectedRow(), 2);

                try{
                    ps=con.prepareStatement("UPDATE DATA3 SET [PAID AMOUNT]="+value+""
                        + "where ([PAYMENT NO]="+jTable1.getSelectedRow()+1+") AND ([CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 1)+"') " );
                    ps.executeQuery();
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
                }
                try{
                    ps=con.prepareStatement("select [PAID AMOUNT],[TOTAL AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 1)+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        ee=rs.getString(1);
                        totalamount=Integer.parseInt(rs.getString(2));
                    }
                    a=Integer.parseInt(ee)-old;
                    int dueamount=totalamount-(a+Integer.parseInt(value));
                    ps=con.prepareStatement("UPDATE table_1 SET [PAID AMOUNT]="+a+"+"+Integer.parseInt(value)+""
                        + "where [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 1)+"'"
                        + "UPDATE table_1 SET [DUE AMOUNT]="+dueamount+""
                        + "WHERE [CUSTOMER NAME]='"+jTable1.getValueAt(jTable1.getSelectedRow(), 1)+"'");
                    ps.execute();
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(rootPane, "ADDED SUCCESSFULLY");

                }

            }
        }
    }//GEN-LAST:event_jButton2KeyPressed
    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        jButton2.setEnabled(false);
    info.removeAllElements();
        try{
            ps=con.prepareStatement("select * from data3 where [ACCOUNT NO]="+jComboBox2.getSelectedItem()+"");
            rs=ps.executeQuery();
            while(rs.next()){
                Vector<String>data=new Vector<String>();
                data.add(rs.getString(1));
                  data.add(rs.getString(2));
               data.add(rs.getString(3));
                data.add(rs.getString(4));
                data.add(rs.getString(5));
                info.add(data);
            }
        }
        catch(SQLException ex){
         
        }

        jTable1.setModel(new DefaultTableModel(
            info,header
        )
        {
            public boolean isCellEditable(int row ,int column){
                return false;
            }
        } );

    }//GEN-LAST:event_jComboBox2ItemStateChanged
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

    }//GEN-LAST:event_jComboBox2ActionPerformed
    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed

        if (evt.getKeyCode()==KeyEvent.VK_TAB) {
            jTextField1.requestFocusInWindow();
            evt.consume();
        }
        if (( evt.getKeyCode()==KeyEvent.VK_TAB ) && ((evt.getModifiers() & KeyEvent.SHIFT_MASK)!=0)){
            evt.consume();
            jTextField5.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextArea1KeyPressed
    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased

    }//GEN-LAST:event_jTextField4KeyReleased
    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
        if ( Character.isDigit(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
    }//GEN-LAST:event_jTextField4KeyTyped
    private void jTextField5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField5FocusLost

    }//GEN-LAST:event_jTextField5FocusLost
    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
         if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField5KeyTyped
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTextField4.getText().equals("") || jTextField5.getText().equals("") || jTextArea1.getText().equals("") ||   jTextField1.getText().equals("") ||   jTextField2.getText().equals("")  ) {
            JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else if(jTextField5.getText().length()>8 || jTextField5.getText().length()<8 )
        {

            JOptionPane.showMessageDialog(rootPane, "KINDLY ENTER VALID NUMBER");
            jTextField5.setText(null);
            jTextField5.requestFocusInWindow();
        }
        else if (Integer.parseInt(jTextField2.getText())<0 ) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID DEPOSIT AMOUNT");
        }
        else if ( Integer.parseInt(jTextField1.getText())<70) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID GALLON RATE");
        }
        else {
         
            try{
                ps=con.prepareStatement("INSERT INTO DATA([CUSTOMER NAME],[CONTACT],[ADDRESS],[RATE/GALLON])"
                    + "VALUES('"+jTextField4.getText()+"',(('"+jComboBox1.getSelectedItem().toString()+""+jTextField5.getText()+"')),'"+jTextArea1.getText()+"','"+jTextField1.getText()+"')"
                    + "INSERT INTO Table_1([CUSTOMER NAME],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[PAID AMOUNT],[TOTAL AMOUNT],[DUE AMOUNT])"
                    + "VALUES('"+jTextField4.getText()+"','','','','"+jTextField2.getText()+"','','-"+jTextField2.getText()+"')"
                );
                ps.executeQuery();
            }

            catch(SQLException ex  ){
               
                
            }

            try{
            ps=con.prepareStatement("SELECT [ACCOUNT NO] from DATA where [CUSTOMER NAME]='"+jTextField4.getText()+"'");
            rs=ps.executeQuery();
                while (rs.next()) {                    
                 nun=Integer.parseInt(rs.getString(1));
            }
            }
                 catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
                }
             if(!(Integer.parseInt(jTextField2.getText())==0)){
                try{
                    ps=con.prepareStatement("INSERT INTO DATA3([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                        +"VALUES('"+(nun)+"','"+jTextField2.getText()+"','"+jTextField4.getText()+"',getdate(),1)"
                    );
                    ps.execute();
                }
                catch(SQLException ex){
             JOptionPane.showMessageDialog(rootPane,"ADDED SUCCESSFULLY");
                }
              
        }
           JOptionPane.showMessageDialog(rootPane,"ADDED SUCCESSFULLY");
            jTextField4.setText(null);
                jTextField5.setText(null);
                jTextArea1.setText(null);
                jTextField1.setText(null);
                jTextField2.setText(null);
                jComboBox1.setSelectedItem(null); 
            }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
   if (jTextField4.getText().equals("") || jTextField5.getText().equals("") || jTextArea1.getText().equals("") ||   jTextField1.getText().equals("") ||   jTextField2.getText().equals("")  ) {
            JOptionPane.showMessageDialog(rootPane, "FILL COMPLETELY");
        }
        else if(jTextField5.getText().length()>8 || jTextField5.getText().length()<8 )
        {

            JOptionPane.showMessageDialog(rootPane, "KINDLY ENTER VALID NUMBER");
            jTextField5.setText(null);
            jTextField5.requestFocusInWindow();
        }
        else if (Integer.parseInt(jTextField2.getText())<0 ) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID DEPOSIT AMOUNT");
        }
        else if ( Integer.parseInt(jTextField1.getText())<70) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER VALID GALLON RATE");
        }
        else {
         
            try{
                ps=con.prepareStatement("INSERT INTO DATA([CUSTOMER NAME],[CONTACT],[ADDRESS],[RATE/GALLON])"
                    + "VALUES('"+jTextField4.getText()+"',(('"+jComboBox1.getSelectedItem().toString()+""+jTextField5.getText()+"')),'"+jTextArea1.getText()+"','"+jTextField1.getText()+"')"
                    + "INSERT INTO Table_1([CUSTOMER NAME],[GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE],[PAID AMOUNT],[TOTAL AMOUNT],[DUE AMOUNT])"
                    + "VALUES('"+jTextField4.getText()+"','','','','"+jTextField2.getText()+"','','-"+jTextField2.getText()+"')"
                );
                ps.executeQuery();
            }

            catch(SQLException ex  ){
                JOptionPane.showMessageDialog(rootPane,"ADDED SUCCESSFULLY");
                
            }

            try{
            ps=con.prepareStatement("SELECT [ACCOUNT NO] from DATA where [CUSTOMER NAME]='"+jTextField4.getText()+"'");
            rs=ps.executeQuery();
                while (rs.next()) {                    
                 nun=Integer.parseInt(rs.getString(1));
            }
            }
                 catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
                }
             if(!(Integer.parseInt(jTextField2.getText())==0)){
                try{
                    ps=con.prepareStatement("INSERT INTO DATA3([ACCOUNT NO],[PAID AMOUNT],[CUSTOMER NAME],[DATE],[PAYMENT NO])"
                        +"VALUES('"+(nun)+"','"+jTextField2.getText()+"','"+jTextField4.getText()+"',getdate(),1)"
                    );
                    ps.execute();
                }
                catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+ "asadd");
                }
            }
           jTextField4.setText(null);
                jTextField5.setText(null);
                jTextArea1.setText(null);
                jTextField1.setText(null);
                jTextField2.setText(null);
                jComboBox1.setSelectedItem(null);      
        }
          
        }
    }//GEN-LAST:event_jButton1KeyPressed
    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
         if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField1KeyTyped
    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        if ( Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
        }
         if ( Character.isSpaceChar(evt.getKeyChar())) {
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "KINDLY SUBMIT VALID DATA");
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField2KeyTyped
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addaccpanel);
        center.getCenteredCorner(addaccpanel,jTabbedPane1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    private void jMenuItem3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem3KeyPressed

    }//GEN-LAST:event_jMenuItem3KeyPressed
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        jComboBox5.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox5.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        jComboBox5.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addbot);
        jTextField8.setText(null);
        jLabel30.setText(null);

    }//GEN-LAST:event_jMenuItem4ActionPerformed
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        PAYCOMBO.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                PAYCOMBO.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        PAYCOMBO.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addpay);
        input.setText(null);
        itemstate.setText(null);

    }//GEN-LAST:event_jMenuItem5ActionPerformed
    private void jMenuItem7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jMenuItem7ItemStateChanged

    }//GEN-LAST:event_jMenuItem7ItemStateChanged
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        jComboBox2.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox2.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editppanel);
        jComboBox2.setSelectedItem(null);
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed

        jComboBox4.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox4.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        center.getCenteredCorner(jPanel11, EDITACC);
        jComboBox4.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(EDITACC);
         jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField5.setText(null);
            jTextArea2.setText(null);
            jTextField3.setText(null);
            
    }//GEN-LAST:event_jMenuItem14ActionPerformed
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        jComboBox3.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox3.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editgpanel);
        jComboBox3.setSelectedItem(null);
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        confield.setText(null);
        cusfiedl.setText(null);
        Address.setText(null);
        tafield.setText(null);
        pafiedlds.setText(null);
        dafiedl.setText(null);
        gdfield.setText(null);
        grfield.setText(null);
        gallonbalancefield.setText(null);
        jComboBox6.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox6.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(customerdata);
        jComboBox6.setSelectedItem(null);

    }//GEN-LAST:event_jMenuItem13ActionPerformed
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        try{

            ps=con.prepareStatement("select sum([GALLON DELIVERED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel7.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON BALANCE]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel19.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON RECIEVED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel17.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }

        try{
            ps=con.prepareStatement("select sum([paid amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel8.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());

        }
        try{
            ps=con.prepareStatement("select sum([total amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel10.setText(rs.getString(1)+"RS");
           }
        }
        catch(SQLException e){
        }

        try{
            ps=con.prepareStatement("select sum([due amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel9.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
        }
        try{
            ps=con.prepareStatement("select * from Table_1 ORDER BY [ACCOUNT NO] ASC");
            rs=ps.executeQuery();
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            jTable2.setEnabled(false);

        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        }
        jTable2.setAutoResizeMode( JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(200);
        jTable2.getColumnModel().getColumn(1).setMinWidth(200);

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(list);
    }//GEN-LAST:event_jMenuItem12ActionPerformed
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        jComboBox7.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox7.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jComboBox7.setSelectedItem(null);
        jTextField9.setText(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(DELETEACC);
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
jComboBox8.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox8.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(deltepay);
jComboBox8.setSelectedItem(null);
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
Printbill  pb=new Printbill(this, rootPaneCheckingEnabled);
pb.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
   pb.jComboBox1.addItem(rs.getString(1));
}
}
catch(SQLException ex){
//JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());       
   
}


pb.jComboBox1.setSelectedItem(null);
pb.jLabel3.setText(null);
pb.setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed
    private void jTabbedPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane1KeyPressed
if (jTabbedPane1.getTabCount()==2){ 
           if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }
}
if (jTabbedPane1.getTabCount()==3) {
           if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }  
         
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
                                       
}
if (jTabbedPane1.getTabCount()==4) {
           if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }  
         
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
             if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }                            
} 
    if (jTabbedPane1.getTabCount()==5) {
         if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }  
         
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
             if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }   
                if (evt.getKeyCode()==KeyEvent.VK_5) {
            jTabbedPane1.setSelectedIndex(4);
            
        }
    }
 if (jTabbedPane1.getTabCount()==6) {
         if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }  
         
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
             if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }   
                if (evt.getKeyCode()==KeyEvent.VK_5) {
            jTabbedPane1.setSelectedIndex(4);
            
        }
                 if (evt.getKeyCode()==KeyEvent.VK_6) {
            jTabbedPane1.setSelectedIndex(5);
            
        }
    }
    if (jTabbedPane1.getTabCount()==7) {
          if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }
        
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
        
           if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }
        
            if (evt.getKeyCode()==KeyEvent.VK_5) {
            jTabbedPane1.setSelectedIndex(4);
            
        }
        
             if (evt.getKeyCode()==KeyEvent.VK_6) {
            jTabbedPane1.setSelectedIndex(5);
            
        }
        
              if (evt.getKeyCode()==KeyEvent.VK_7) {
            jTabbedPane1.setSelectedIndex(6);
            
        }
    }
    if (jTabbedPane1.getTabCount()==8) {
         if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }
        
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
        
           if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }
        
            if (evt.getKeyCode()==KeyEvent.VK_5) {
            jTabbedPane1.setSelectedIndex(4);
            
        }
        
             if (evt.getKeyCode()==KeyEvent.VK_6) {
            jTabbedPane1.setSelectedIndex(5);
            
        }
        
              if (evt.getKeyCode()==KeyEvent.VK_7) {
            jTabbedPane1.setSelectedIndex(6);
            
        }
        
               if (evt.getKeyCode()==KeyEvent.VK_8) {
            jTabbedPane1.setSelectedIndex(7);
            
        }
    }
    if (jTabbedPane1.getTabCount()==9) {
         if (evt.getKeyCode()==KeyEvent.VK_1) {
            jTabbedPane1.setSelectedIndex(0);
            
        }
         if (evt.getKeyCode()==KeyEvent.VK_2) {
            jTabbedPane1.setSelectedIndex(1);
            
        }
        
          if (evt.getKeyCode()==KeyEvent.VK_3) {
            jTabbedPane1.setSelectedIndex(2);
            
        }
        
           if (evt.getKeyCode()==KeyEvent.VK_4) {
            jTabbedPane1.setSelectedIndex(3);
            
        }
        
            if (evt.getKeyCode()==KeyEvent.VK_5) {
            jTabbedPane1.setSelectedIndex(4);
            
        }
        
             if (evt.getKeyCode()==KeyEvent.VK_6) {
            jTabbedPane1.setSelectedIndex(5);
            
        }
        
              if (evt.getKeyCode()==KeyEvent.VK_7) {
            jTabbedPane1.setSelectedIndex(6);
            
        }
        
               if (evt.getKeyCode()==KeyEvent.VK_8) {
            jTabbedPane1.setSelectedIndex(7);
            
        }
        
                if (evt.getKeyCode()==KeyEvent.VK_9) {
            jTabbedPane1.setSelectedIndex(8);
            
        }
    }
       
        
//                 if (evt.getKeyCode()==KeyEvent.VK_
//                         
//                         
//                         
//                         
//                         
//                         0{
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//        
//                  if (evt.getKeyCode()==KeyEvent.VK_1) {
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//        
//                   if (evt.getKeyCode()==KeyEvent.VK_1) {
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//        
//                    if (evt.getKeyCode()==KeyEvent.VK_1) {
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//        
//                     if (evt.getKeyCode()==KeyEvent.VK_1) {
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//         if (evt.getKeyCode()==KeyEvent.VK_1) {
//            jTabbedPane1.setSelectedIndex(0);
//            
//        }
//        

    }//GEN-LAST:event_jTabbedPane1KeyPressed
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
      
       
        String sql="SELECT [PAID AMOUNT] FROM table_1 where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"";
        String sql1="DELETE FROM data3 where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+" AND [PAYMENT NO]="+jTable5.getValueAt(jTable5.getSelectedRow(), 1)+"";
        int option=JOptionPane.showConfirmDialog(rootPane, "ARE YOU SURE YOU WANT TO DELETE?");
        if (option==0) {
         int value=Integer.parseInt(jTable5.getValueAt(jTable5.getSelectedRow(), 3).toString());
        try{
        ps=con.prepareStatement(sql1);
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
        }        
        try{
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        while(rs.next()){
        delpay=Integer.parseInt(rs.getString(1));
        }
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"2");
        }
        int currentpay=delpay-value;
        try{
        ps=con.prepareStatement("UPDATE table_1 set "
                + "[PAID AMOUNT]="+currentpay+""
                + "where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
        }
         try{
        ps=con.prepareStatement("UPDATE table_1 set "
                + "[DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT]"
                + "where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
        }
         del2.removeAllElements();
        try{
        ps=con.prepareStatement("SELECT * FROM data3 where "
                + "[ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        rs=ps.executeQuery();
            while (rs.next()) {        
            Vector<String>data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            del2.add(data);
            }
            jTable5.setModel(new DefaultTableModel(
            del2,header)
            {
            public boolean isCellEditable(int row ,int col){
            return false;
            }});
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
        }
        JOptionPane.showMessageDialog(paypanel, "DELETED SUCCESSFULLY");
        
        
    
        
        
        
        
    }   
    }//GEN-LAST:event_jButton8ActionPerformed
    private void jComboBox8ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox8ItemStateChanged
        jButton8.setEnabled(false);
        del.removeAllElements();
    try{
    ps=con.prepareStatement("select * from data3 where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
    rs=ps.executeQuery();
         while (rs.next()) {             
             Vector<String> data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            del.add(data);
         }
            }
     catch(SQLException ex){
         
             }
     
     
     jTable5.setModel(new DefaultTableModel(
     del,header ){public boolean isCellEditable(int row,int col){
     return false;
     }
     });
     
     
     
     

    }//GEN-LAST:event_jComboBox8ItemStateChanged
    private void jComboBox9ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox9ItemStateChanged
jButton9.setEnabled(false);
        del1.removeAllElements();
    try{
    ps=con.prepareStatement("select * from data2 where [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
    rs=ps.executeQuery();
         while (rs.next()) {             
             Vector<String> data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            data.add(rs.getString(6));
            data.add(rs.getString(7));
            del1.add(data);
         }
            }
     catch(SQLException ex){
         
             }
     
     
     jTable6.setModel(new DefaultTableModel(
     del1,colname)
     {public boolean isCellEditable(int row,int col){
     return false;
     
     }
     }
     );
    }//GEN-LAST:event_jComboBox9ItemStateChanged
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        jComboBox9.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox9.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(delgal);
jComboBox9.setSelectedItem(null);
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
          if((jTable5.getSelectedRow()>=0)){
            jButton8.setEnabled(true);
            
        }
    }//GEN-LAST:event_jTable5MouseClicked
    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
     
      
       
    }//GEN-LAST:event_jTextField8ActionPerformed
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try{

            ps=con.prepareStatement("select sum([GALLON DELIVERED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel7.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON BALANCE]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel19.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON RECIEVED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel17.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }

        try{
            ps=con.prepareStatement("select sum([paid amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel8.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());

        }
        try{
            ps=con.prepareStatement("select sum([total amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel10.setText(rs.getString(1)+"RS");

            }
        }
        catch(SQLException e){
        }

        try{
            ps=con.prepareStatement("select sum([due amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel9.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
        }
        try{
            ps=con.prepareStatement("select * from Table_1 ORDER BY [ACCOUNT NO] ASC");
            rs=ps.executeQuery();
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            jTable2.setEnabled(false);

        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        }
        jTable2.setAutoResizeMode( JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(200);
        jTable2.getColumnModel().getColumn(1).setMinWidth(200);

    }//GEN-LAST:event_jButton10ActionPerformed
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        if (evt.getClickCount()==2) {
          DefaultMutableTreeNode mtree=(DefaultMutableTreeNode) jTree1.getSelectionPath().getLastPathComponent();
        if (mtree.getUserObject()=="ADD ACCOUNT") {
             jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addaccpanel);
            }
        else if (mtree.getUserObject()=="LIST OF CUSTOMERS") {
                        try{

            ps=con.prepareStatement("select sum([GALLON DELIVERED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel7.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON BALANCE]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel19.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON RECIEVED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel17.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }

        try{
            ps=con.prepareStatement("select sum([paid amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel8.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());

        }
        try{
            ps=con.prepareStatement("select sum([total amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel10.setText(rs.getString(1)+"RS");
           }
        }
        catch(SQLException e){
        }

        try{
            ps=con.prepareStatement("select sum([due amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel9.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
        }
        try{
            ps=con.prepareStatement("select * from Table_1 ORDER BY [ACCOUNT NO] ASC");
            rs=ps.executeQuery();
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            jTable2.setEnabled(false);

        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        }
        jTable2.setAutoResizeMode( JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(200);
        jTable2.getColumnModel().getColumn(1).setMinWidth(200);

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(list);
            }
        else if (mtree.getUserObject()=="ADD INVOICES" ){
                 jComboBox5.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox5.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        jComboBox5.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addbot);
        jTextField8.setText(null);
        jLabel30.setText(null);
            }
        
        else if (mtree.getUserObject() == "ADD PAYMENT") {
               PAYCOMBO.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                PAYCOMBO.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        PAYCOMBO.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addpay);
        input.setText(null);
        itemstate.setText(null);

        }
        else if (mtree.getUserObject() == "EDIT ACCOUNT") {
             jComboBox4.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox4.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        center.getCenteredCorner(jPanel11, EDITACC);
        jComboBox4.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(EDITACC);
         jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField5.setText(null);
            jTextArea2.setText(null);
            jTextField3.setText(null);
            
        }
        else if (mtree.getUserObject()=="EDIT GALLONS") {
            jComboBox3.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox3.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editgpanel);
        jComboBox3.setSelectedItem(null);  
        }
        else if (mtree.getUserObject()=="EDIT PAYMENT") {
        jComboBox2.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox2.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editppanel);
        jComboBox2.setSelectedItem(null);
            
        }
        else if (mtree.getUserObject()=="CUSTOMER DATA") {
              confield.setText(null);
        cusfiedl.setText(null);
        Address.setText(null);
        tafield.setText(null);
        pafiedlds.setText(null);
        dafiedl.setText(null);
        gdfield.setText(null);
        grfield.setText(null);
        gallonbalancefield.setText(null);
        jComboBox6.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox6.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(customerdata);
        jComboBox6.setSelectedItem(null);
        }
        else if (mtree.getUserObject()=="ACCOUNT") {
          jComboBox7.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox7.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jComboBox7.setSelectedItem(null);
        jTextField9.setText(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(DELETEACC);  
        }
        else if (mtree.getUserObject()=="DELETE PAYMENT") {
        jComboBox8.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox8.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(deltepay);
jComboBox8.setSelectedItem(null);    
        }
        else if (mtree.getUserObject()=="DELETE GALLONS") {
          jComboBox9.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox9.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(delgal);
jComboBox9.setSelectedItem(null);   
        }
      else if (mtree.getUserObject()=="RECIEPT") {
      Printbill  pb=new Printbill(this, rootPaneCheckingEnabled);
pb.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
   pb.jComboBox1.addItem(rs.getString(1));
}
}
catch(SQLException ex){
//JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());       
   
}


pb.jComboBox1.setSelectedItem(null);
pb.jLabel3.setText(null);
pb.setVisible(true);
      
      
      
      
      } 
     else if (mtree.getUserObject()=="MONTHLY REPORTS") {
      bwdata date=new bwdata(this, rootPaneCheckingEnabled);
    date.jButton1.setEnabled(false);
    date.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA ORDER BY [ACCOUNT NO] ASC");
rs=ps.executeQuery();
while(rs.next()){
date.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
date.jComboBox1.setSelectedItem(null);
date.jLabel3.setText(null);
date.setVisible(true);
     
     
     }    
      else if (mtree.getUserObject()=="OVERALL REPORTS") {
      
      Printreport pr=new Printreport(this, rootPaneCheckingEnabled);
pr.value="overall";
pr.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA");
rs=ps.executeQuery();
while(rs.next()){
pr.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
pr.jComboBox1.setSelectedItem(null);
pr.jLabel3.setText(null);
pr.setVisible(true);

      
      }   
        
    }    
    }//GEN-LAST:event_jTree1MouseClicked
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
String sql="DELETE FROM DATA2 where [ACCOUNT NO]="+jComboBox9.getSelectedItem()+" AND [DELIVERY NO]="+jTable6.getValueAt(jTable6.getSelectedRow(), 2)+"";  
String sql1="SELECT [GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE] FROM table_1 where [ACCOUNT NO] ="+jComboBox9.getSelectedItem()+"";
String sql2="SELECT [TOTAL AMOUNT] FROM table_1 where [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
String sql4="UPDATE table_1 SET"
        + "[DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT]"
        + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
String sql5="SELECT [RATE/GALLON] FROM DATA WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
       
int option=JOptionPane.showConfirmDialog(rootPane, "ARE YOU SURE YOU WANT TO DELETE?");
        
        if (option==0) {
            int value1=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 3).toString());
            int value2=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 4).toString());
            int value3=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 5).toString());
            try{
            ps=con.prepareStatement(sql);
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"1");
            }
            try{
            ps=con.prepareStatement(sql1);
            rs=ps.executeQuery();
                while (rs.next()) {                    
            gd=Integer.parseInt(rs.getString(1));
            gr=Integer.parseInt(rs.getString(2));
            gbal=Integer.parseInt(rs.getString(3));
           // JOptionPane.showMessageDialog(paypanel, gd);
           // JOptionPane.showMessageDialog(paypanel, gr);
            //JOptionPane.showMessageDialog(paypanel, gbal);
            }
        }        
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"bNF");
            }
            try{
                
            ps=con.prepareStatement("UPDATE table_1 SET"
                    + "[GALLON DELIVERED]="+gd+"-"+value1+","
                    + "[GALLON RECIEVED]="+gr+"-"+value2+","
                    + "[GALLON BALANCE]="+gbal+"-"+value3+""
                    + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            ps.execute();
        }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"3");
            }
            try{
            ps=con.prepareStatement(sql5);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    int rate=(Integer.parseInt(rs.getString(1)));
                    totalgd=rate*value1;
               //     JOptionPane.showMessageDialog(paypanel, totalgd);
                }
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
            }
            try{
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    int totalamu=Integer.parseInt(rs.getString(1));
                    finaltotal=totalamu-totalgd;
             //       JOptionPane.showMessageDialog(paypanel, finaltotal);
                }
            
            }
           
            catch(SQLException ex){
            
            
            }
            try{
            ps=con.prepareStatement("UPDATE table_1 SET"
        + "[TOTAL AMOUNT]="+finaltotal+""
        + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"5");
            }
            try{
            ps=con.prepareStatement(sql4);
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"6");
            }
        del3.removeAllElements();
            try{
            ps=con.prepareStatement("SELECT * FROM DATA2 WHERE"
                    + "[ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            rs=ps.executeQuery();
            while (rs.next()) {             
             Vector<String> data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            data.add(rs.getString(6));
            data.add(rs.getString(7));
            del3.add(data);
         }
            }
     catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"7");
             }
     
     
     jTable6.setModel(new DefaultTableModel(
     del3,colname)
     {public boolean isCellEditable(int row,int col){
     return false;
     
     }
     }
     );
}
            
    
        
  
   
    }//GEN-LAST:event_jButton9ActionPerformed
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
Printreport pr=new Printreport(this, rootPaneCheckingEnabled);
pr.value="overall";
pr.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA");
rs=ps.executeQuery();
while(rs.next()){
pr.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
pr.jComboBox1.setSelectedItem(null);
pr.jLabel3.setText(null);
pr.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed
    private void enterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterKeyReleased
       
    }//GEN-LAST:event_enterKeyReleased
    private void inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyPressed
       
    }//GEN-LAST:event_inputKeyPressed
    private void inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyReleased
       
    }//GEN-LAST:event_inputKeyReleased

    private void jTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MouseClicked
          if((jTable6.getSelectedRow()>=0)){
            jButton9.setEnabled(true);
            
        }
    }//GEN-LAST:event_jTable6MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
    bwdata date=new bwdata(this, rootPaneCheckingEnabled);
   // date.jButton1.setEnabled(false);
    date.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA ORDER BY [ACCOUNT NO] ASC");
rs=ps.executeQuery();
while(rs.next()){
date.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
date.jComboBox1.setSelectedItem(null);
date.jLabel3.setText(null);
date.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTree1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTree1KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
             DefaultMutableTreeNode mtree=(DefaultMutableTreeNode) jTree1.getSelectionPath().getLastPathComponent();
        if (mtree.getUserObject()=="ADD ACCOUNT") {
             jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addaccpanel);
            }
        else if (mtree.getUserObject()=="LIST OF CUSTOMERS") {
                        try{

            ps=con.prepareStatement("select sum([GALLON DELIVERED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel7.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON BALANCE]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel19.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }
        try{

            ps=con.prepareStatement("select sum([GALLON RECIEVED]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel17.setText(rs.getString(1));
            }
        }
        catch(SQLException e){

        }

        try{
            ps=con.prepareStatement("select sum([paid amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel8.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());

        }
        try{
            ps=con.prepareStatement("select sum([total amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel10.setText(rs.getString(1)+"RS");
           }
        }
        catch(SQLException e){
        }

        try{
            ps=con.prepareStatement("select sum([due amount]) from table_1");
            rs=ps.executeQuery();
            while(rs.next()){
                jLabel9.setText(rs.getString(1)+"RS");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
        }
        try{
            ps=con.prepareStatement("select * from Table_1 ORDER BY [ACCOUNT NO] ASC");
            rs=ps.executeQuery();
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            jTable2.setEnabled(false);

        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        }
        jTable2.setAutoResizeMode( JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(200);
        jTable2.getColumnModel().getColumn(1).setMinWidth(200);

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(list);
            }
        else if (mtree.getUserObject()=="ADD INVOICES" ){
                 jComboBox5.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox5.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        jComboBox5.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addbot);
        jTextField8.setText(null);
        jLabel30.setText(null);
            }
        
        else if (mtree.getUserObject() == "ADD PAYMENT") {
               PAYCOMBO.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                PAYCOMBO.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        PAYCOMBO.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(addpay);
        input.setText(null);
        itemstate.setText(null);

        }
        else if (mtree.getUserObject() == "EDIT ACCOUNT") {
             jComboBox4.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox4.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
        }
        center.getCenteredCorner(jPanel11, EDITACC);
        jComboBox4.setSelectedItem(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(EDITACC);
         jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField5.setText(null);
            jTextArea2.setText(null);
            jTextField3.setText(null);
            
        }
        else if (mtree.getUserObject()=="EDIT GALLONS") {
            jComboBox3.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox3.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editgpanel);
        jComboBox3.setSelectedItem(null);  
        }
        else if (mtree.getUserObject()=="EDIT PAYMENT") {
        jComboBox2.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox2.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(editppanel);
        jComboBox2.setSelectedItem(null);
            
        }
        else if (mtree.getUserObject()=="CUSTOMER DATA") {
              confield.setText(null);
        cusfiedl.setText(null);
        Address.setText(null);
        tafield.setText(null);
        pafiedlds.setText(null);
        dafiedl.setText(null);
        gdfield.setText(null);
        grfield.setText(null);
        gallonbalancefield.setText(null);
        jComboBox6.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA ");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox6.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(customerdata);
        jComboBox6.setSelectedItem(null);
        }
        else if (mtree.getUserObject()=="ACCOUNT") {
          jComboBox7.removeAllItems();
        try{
            ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBox7.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex){

        }

        jComboBox7.setSelectedItem(null);
        jTextField9.setText(null);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.add(DELETEACC);  
        }
        else if (mtree.getUserObject()=="DELETE PAYMENT") {
        jComboBox8.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox8.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(deltepay);
jComboBox8.setSelectedItem(null);    
        }
        else if (mtree.getUserObject()=="DELETE GALLONS") {
          jComboBox9.removeAllItems();
try{
ps=con.prepareStatement("select [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
 jComboBox9.addItem(rs.getString(1));
    }}
catch(SQLException ex){

}
jTabbedPane1.setVisible(true);
jTabbedPane1.add(delgal);
jComboBox9.setSelectedItem(null);   
        }
      else if (mtree.getUserObject()=="RECIEPT") {
      Printbill  pb=new Printbill(this, rootPaneCheckingEnabled);
pb.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] from data");
rs=ps.executeQuery();
    while (rs.next()) {        
   pb.jComboBox1.addItem(rs.getString(1));
}
}
catch(SQLException ex){
//JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());       
   
}


pb.jComboBox1.setSelectedItem(null);
pb.jLabel3.setText(null);
pb.setVisible(true);
      
      
      
      
      } 
     else if (mtree.getUserObject()=="MONTHLY REPORTS") {
      bwdata date=new bwdata(this, rootPaneCheckingEnabled);
    date.jButton1.setEnabled(false);
    date.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA ORDER BY [ACCOUNT NO] ASC");
rs=ps.executeQuery();
while(rs.next()){
date.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
date.jComboBox1.setSelectedItem(null);
date.jLabel3.setText(null);
date.setVisible(true);
     
     
     }    
      else if (mtree.getUserObject()=="OVERALL REPORTS") {
      
      Printreport pr=new Printreport(this, rootPaneCheckingEnabled);
pr.value="overall";
pr.jComboBox1.removeAllItems();
try{
ps=con.prepareStatement("SELECT [ACCOUNT NO] FROM DATA");
rs=ps.executeQuery();
while(rs.next()){
pr.jComboBox1.addItem(rs.getString(1));
}
}     
catch(SQLException ex){
JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());
}
pr.jComboBox1.setSelectedItem(null);
pr.jLabel3.setText(null);
pr.setVisible(true);

      
      }   
        
        }
    }//GEN-LAST:event_jTree1KeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
              value=JOptionPane.showInputDialog("ENTER NO OF GALLON");
        if (!(value==null)) {
           if (!(value.matches("\\d+"))){
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else if (Integer.parseInt(String.valueOf(jTable3.getValueAt(jTable3.getSelectedRow(), 4)))>Integer.parseInt(value)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else{
            int old=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString());
            String sql1="UPDATE DATA2 SET [GALLON DELIVERED]="+value+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" AND [DELIVERY NO]="+jTable3.getValueAt(jTable3.getSelectedRow(), 2)+"";
            String sql2="UPDATE DATA2 SET [GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" AND [DELIVERY NO]="+jTable3.getValueAt(jTable3.getSelectedRow(), 2)+"";
            String tab1="select [GALLON DELIVERED] from table_1 where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'";
            String tab3="UPDATE table_1 SET [GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+" ";
            try{
            ps=con.prepareStatement(sql1);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"1");
            }
            try{
            ps=con.prepareStatement(sql2);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"2");
            }
            try{
            ps=con.prepareStatement(tab1);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    intial=rs.getString(1);
                }
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"3");
            }
            finalval=(Integer.parseInt(intial)-old)+Integer.parseInt(value);
            //JOptionPane.showMessageDialog(paypanel, finalval);
            try{
            ps=con.prepareStatement("UPDATE table_1 SET [GALLON DELIVERED]="+finalval+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
            }
            try{
            ps=con.prepareStatement(tab3);
            ps.execute();
            }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"5");
            }
            
             try{
                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
                        + "where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                        cost=rs.getString(1);
                    }
            }
                  catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
                }
                 try{
                    ps=con.prepareStatement("select [TOTAL AMOUNT] from table_1  "
                        + "where [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"'");
                    rs=ps.executeQuery();
                    while(rs.next()){
                       oldtotal=rs.getString(1);
                    }
                }
                  catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
                }
                int zz=Integer.parseInt(cost)*Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString());
//                JOptionPane.showMessageDialog(paypanel, zz);
                int zz1=Integer.parseInt(cost)*Integer.parseInt(value);
//                JOptionPane.showMessageDialog(paypanel, zz1);
                int afterminus=(Integer.parseInt(oldtotal)-zz)+zz1;
//                JOptionPane.showMessageDialog(paypanel, afterminus);
                try{
                ps=con.prepareStatement("UPDATE table_1 SET [TOTAL AMOUNT]="+afterminus+" "
                        + "WHERE [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
                ps.execute();
                
                }
                catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"7");
                
                }
                try{
                 ps=con.prepareStatement("UPDATE table_1 SET [DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT] "
                        + "WHERE [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"");
                ps.execute();
                
                }
                catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"8");
                
                }
                jTable3.setValueAt(value,jTable3.getSelectedRow(), 3);  
                jTable3.setValueAt(Integer.parseInt(value)-Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString()),jTable3.getSelectedRow(),  5);
             JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY");
            }   
                
                
       
            

//           
//            if (Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString()) == 0) {
//                jTable3.setValueAt(value, jTable3.getSelectedRow(), 5);
//                try{
//                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        cost=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//                }
//                try{
//                    ps=con.prepareStatement("select [TOTAL AMOUNT],[DUE AMOUNT],[PAID AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "");
//                    rs=ps.executeQuery();
//                    while (rs.next()) {
//                        oldtotal=rs.getString(1);
//                        olddue=rs.getString(2);
//                        paidamount=rs.getString(3);
//                    }
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
//                }
//
//                try{
//                    ps=con.prepareStatement("UPDATE DATA2 SET [GALLON DELIVERED]="+value+",[GALLON BALANCE]="+value+" WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"' AND [DELIVERY NO]="+jTable3.getSelectedRow()+"+1");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                try{
//                    ps=con.prepareStatement("select [GALLON DELIVERED] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                    );
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        intial=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//                }
//
//                current=Integer.parseInt(intial)-old;
//                totalamount=Integer.parseInt(cost)* Integer.parseInt(value);
//                oldtotalamount=Integer.parseInt(cost)* old;
//                finaltotalamount=(Integer.parseInt(oldtotal)-oldtotalamount)+totalamount;
//                try{
//                    ps=con.prepareStatement("UPDATE table_1 set [GALLON DELIVERED]="+current+"+"+Integer.parseInt(value)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "UPDATE table_1 set [GALLON BALANCE]="+value+",[TOTAL AMOUNT]="+finaltotalamount+",[DUE AMOUNT]="+finaltotalamount+"-"+Integer.parseInt(paidamount)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage() );
//                }
//            }
//            //when some gallon is recieved
//
//            else{
//                int balance=Integer.parseInt(value)-Integer.parseInt(String.valueOf(jTable3.getValueAt(jTable3.getSelectedRow(), 3)));
//                jTable3.setValueAt(balance, jTable3.getSelectedRow(), 5);
//                try{
//                    ps=con.prepareStatement("select [RATE/GALLON] from DATA  "
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        cost=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//                }
//                try{
//                    ps=con.prepareStatement("select [TOTAL AMOUNT],[DUE AMOUNT],[PAID AMOUNT] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "");
//                    rs=ps.executeQuery();
//                    while (rs.next()) {
//                        oldtotal=rs.getString(1);
//                        olddue=rs.getString(2);
//                        paidamount=rs.getString(3);
//                    }
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage());
//                }
//                try{
//                    ps=con.prepareStatement("UPDATE DATA2 SET [GALLON DELIVERED]="+value+",[GALLON BALANCE]="+value+"-"+jTable3.getValueAt(jTable3.getSelectedRow(), 4)+" WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"' AND [DELIVERY NO]="+jTable3.getSelectedRow()+"+1");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                try{
//                    ps=con.prepareStatement("select [GALLON DELIVERED] from table_1 where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                    );
//                    rs=ps.executeQuery();
//                    while(rs.next()){
//                        intial=rs.getString(1);
//                    }
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//                }
//
//                current=Integer.parseInt(intial)-old;
//                totalamount=Integer.parseInt(cost)* Integer.parseInt(value);
//                oldtotalamount=Integer.parseInt(cost)* old;
//                finaltotalamount=(Integer.parseInt(oldtotal)-oldtotalamount)+totalamount;
//                try{
//                    ps=con.prepareStatement("UPDATE table_1 set [GALLON DELIVERED]="+current+"+"+Integer.parseInt(value)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'"
//                        + "UPDATE table_1 set [GALLON BALANCE]=[GALLON DELIVERED]-"+jTable3.getValueAt(jTable3.getSelectedRow(), 3)+",[TOTAL AMOUNT]="+finaltotalamount+",[DUE AMOUNT]="+finaltotalamount+"-"+Integer.parseInt(paidamount)+""
//                        + "where [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'");
//                    ps.execute();
//                }
//                catch(SQLException ex)
//                {
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage() );
//                }
//            }
//            JOptionPane.showMessageDialog(paypanel, "EDIT SUCCESSFULLY");
        }
            
            
            
            
            
            
            
            
            
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
           String value2=JOptionPane.showInputDialog("ENTER NO OF RETURNED GALLON");
    
        if (!(value2.matches("\\d+"))){
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        
        
        
      else if (Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString())<Integer.parseInt(value2)) {
            JOptionPane.showMessageDialog(rootPane, "INVALID DATA");
        }
        else{
            try{
                String sql="SELECT [GALLON BALANCE],[GALLON RECIEVED] FROM table_1 where"
                + "[CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                while(rs.next()){
                    totalbal=rs.getString(1);
                    totalrec=rs.getString(2);
                }
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"6");
            }
//            int oldbac=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 5).toString());
//            int oldrec=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString());
            int bal=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString())-Integer.parseInt(value2);
            try{
                String sql="UPDATE DATA2 SET "
                + "[GALLON RECIEVED]="+value2+","
                + "[GALLON BALANCE]="+bal+""
                + "WHERE [ACCOUNT NO]='"+jComboBox3.getSelectedItem()+"' AND "
                + "[DELIVERY NO]="+jTable3.getSelectedRow()+"+1";
                ps=con.prepareStatement(sql);
                ps.execute();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"5");
            }
            int a=Integer.parseInt(totalrec);
//            JOptionPane.showMessageDialog(paypanel, a);
            int b=Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString());
//            JOptionPane.showMessageDialog(paypanel, b);
            int c=Integer.parseInt(value2);
//            JOptionPane.showMessageDialog(paypanel, c);
            int finalrec=(a-b)+c;
//            JOptionPane.showMessageDialog(paypanel, finalrec);
            String table1sql1="UPDATE table_1 "
                    + "SET [GALLON RECIEVED]="+finalrec+""
                    + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"";
            String table1sql2="UPDATE table_1 SET [GALLON BALANCE] = [GALLON DELIVERED]- [GALLON RECIEVED]"
                            + "where [ACCOUNT NO]="+jComboBox3.getSelectedItem()+"";
         try{
        ps=con.prepareStatement(table1sql1);
        ps.execute();
         }
         catch(SQLException ex){
         JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"table1sql1");
                 
         }
          try{
        ps=con.prepareStatement(table1sql2);
        ps.execute();
         }
         catch(SQLException ex){
         JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"table1sql2");
                 
         }
        jTable3.setValueAt(value2, jTable3.getSelectedRow(), 4);
        jTable3.setValueAt(bal, jTable3.getSelectedRow(), 5);  

//            if (Integer.parseInt(totalrec)==0) {
//                try{
//                    String sql="UPDATE table_1 SET "
//                    + "[GALLON RECIEVED]=[GALLON RECIEVED]+"+value2+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"4");
//
//                }
//                try{
//                    String sql="UPDATE table_1 SET"
//                    + "[GALLON BALANCE]=[GALLON DELIVERED]-[GALLON RECIEVED]"
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
//                }
//                }
//            else{
//                int aftereditrec=(Integer.parseInt(totalbal)-oldbac)+Integer.parseInt(value2);
//                int aftereditbal=(Integer.parseInt(totalrec)-oldrec)+bal;
//                try{
//                    String sql="UPDATE table_1 SET "
//                    + "[GALLON RECIEVED]="+aftereditrec+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"2");
//                }
//                try{
//                    String sql="UPDATE table_1 SET"
//                    + "[GALLON BALANCE]="+aftereditbal+""
//                    + "WHERE [CUSTOMER NAME]='"+jTable3.getValueAt(jTable3.getSelectedRow(), 1)+"'";
//                    ps=con.prepareStatement(sql);
//                    ps.execute();
//                }
//                catch(SQLException ex){
//                    JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
//
//                }
//            }
        JOptionPane.showMessageDialog(paypanel, "ADDED SUCCESSFULLY");
        }   
            
            
            
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton8KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
                 String sql="SELECT [PAID AMOUNT] FROM table_1 where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"";
        String sql1="DELETE FROM data3 where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+" AND [PAYMENT NO]="+jTable5.getValueAt(jTable5.getSelectedRow(), 1)+"";
        int option=JOptionPane.showConfirmDialog(rootPane, "ARE YOU SURE YOU WANT TO DELETE?");
        if (option==0) {
         int value=Integer.parseInt(jTable5.getValueAt(jTable5.getSelectedRow(), 3).toString());
        try{
        ps=con.prepareStatement(sql1);
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"1");
        }        
        try{
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        while(rs.next()){
        delpay=Integer.parseInt(rs.getString(1));
        }
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"2");
        }
        int currentpay=delpay-value;
        try{
        ps=con.prepareStatement("UPDATE table_1 set "
                + "[PAID AMOUNT]="+currentpay+""
                + "where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
        }
         try{
        ps=con.prepareStatement("UPDATE table_1 set "
                + "[DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT]"
                + "where [ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        ps.execute();
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage()+"3");
        }
         del2.removeAllElements();
        try{
        ps=con.prepareStatement("SELECT * FROM data3 where "
                + "[ACCOUNT NO]="+jComboBox8.getSelectedItem()+"");
        rs=ps.executeQuery();
            while (rs.next()) {        
            Vector<String>data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            del2.add(data);
            }
            jTable5.setModel(new DefaultTableModel(
            del2,header)
            {
            public boolean isCellEditable(int row ,int col){
            return false;
            }});
        }
        catch(SQLException ex){
        JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
        }
        JOptionPane.showMessageDialog(paypanel, "DELETED SUCCESSFULLY");
        }
        }
    }//GEN-LAST:event_jButton8KeyPressed

    private void jButton9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton9KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            String sql="DELETE FROM DATA2 where [ACCOUNT NO]="+jComboBox9.getSelectedItem()+" AND [DELIVERY NO]="+jTable6.getValueAt(jTable6.getSelectedRow(), 2)+"";  
String sql1="SELECT [GALLON DELIVERED],[GALLON RECIEVED],[GALLON BALANCE] FROM table_1 where [ACCOUNT NO] ="+jComboBox9.getSelectedItem()+"";
String sql2="SELECT [TOTAL AMOUNT] FROM table_1 where [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
String sql4="UPDATE table_1 SET"
        + "[DUE AMOUNT]=[TOTAL AMOUNT]-[PAID AMOUNT]"
        + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
String sql5="SELECT [RATE/GALLON] FROM DATA WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"";
       
int option=JOptionPane.showConfirmDialog(rootPane, "ARE YOU SURE YOU WANT TO DELETE?");
        
        if (option==0) {
            int value1=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 3).toString());
            int value2=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 4).toString());
            int value3=Integer.parseInt(jTable6.getValueAt(jTable6.getSelectedRow(), 5).toString());
            try{
            ps=con.prepareStatement(sql);
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"1");
            }
            try{
            ps=con.prepareStatement(sql1);
            rs=ps.executeQuery();
                while (rs.next()) {                    
            gd=Integer.parseInt(rs.getString(1));
            gr=Integer.parseInt(rs.getString(2));
            gbal=Integer.parseInt(rs.getString(3));
           // JOptionPane.showMessageDialog(paypanel, gd);
           // JOptionPane.showMessageDialog(paypanel, gr);
            //JOptionPane.showMessageDialog(paypanel, gbal);
            }
        }        
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"bNF");
            }
            try{
                
            ps=con.prepareStatement("UPDATE table_1 SET"
                    + "[GALLON DELIVERED]="+gd+"-"+value1+","
                    + "[GALLON RECIEVED]="+gr+"-"+value2+","
                    + "[GALLON BALANCE]="+gbal+"-"+value3+""
                    + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            ps.execute();
        }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"3");
            }
            try{
            ps=con.prepareStatement(sql5);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    int rate=(Integer.parseInt(rs.getString(1)));
                    totalgd=rate*value1;
               //     JOptionPane.showMessageDialog(paypanel, totalgd);
                }
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"4");
            }
            try{
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
                while (rs.next()) {                    
                    int totalamu=Integer.parseInt(rs.getString(1));
                    finaltotal=totalamu-totalgd;
             //       JOptionPane.showMessageDialog(paypanel, finaltotal);
                }
            
            }
           
            catch(SQLException ex){
            
            
            }
            try{
            ps=con.prepareStatement("UPDATE table_1 SET"
        + "[TOTAL AMOUNT]="+finaltotal+""
        + "WHERE [ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"5");
            }
            try{
            ps=con.prepareStatement(sql4);
            ps.execute();
        }
            catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"6");
            }
        del3.removeAllElements();
            try{
            ps=con.prepareStatement("SELECT * FROM DATA2 WHERE"
                    + "[ACCOUNT NO]="+jComboBox9.getSelectedItem()+"");
            rs=ps.executeQuery();
            while (rs.next()) {             
             Vector<String> data=new Vector<String>();
            data.add(rs.getString(1));
            data.add(rs.getString(2));
            data.add(rs.getString(3));
            data.add(rs.getString(4));
            data.add(rs.getString(5));
            data.add(rs.getString(6));
            data.add(rs.getString(7));
            del3.add(data);
         }
            }
     catch(SQLException ex){
            JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage()+"7");
             }
     
     
     jTable6.setModel(new DefaultTableModel(
     del3,colname)
     {public boolean isCellEditable(int row,int col){
     return false;
     
     }
     }
     );
}
            
    
        }
    }//GEN-LAST:event_jButton9KeyPressed

    private void jButton7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton7KeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
             int value=   JOptionPane.showConfirmDialog(paypanel, "ARE YOU SURE YOU WANT DELETE SELECTED ACCOUNT?", "CONFIRMATION", JOptionPane.YES_NO_OPTION);
        if (value==0) {
            try{
                String sql="delete from table_1 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data2 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+""
                + "delete from data3 where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+"";
                ps=con.prepareStatement(sql);
                ps.execute();
                JOptionPane.showMessageDialog(paypanel, "DELETED SUCCESSFULLY");
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(paypanel, ex.getLocalizedMessage());

            }
            jComboBox7.removeAllItems();
            jTextField9.setText(null);
            try{
                ps=con.prepareStatement("select [ACCOUNT NO] from DATA");
                rs=ps.executeQuery();
                while(rs.next()){
                    jComboBox7.addItem(rs.getString(1));
                }
            }
            catch(SQLException ex){
            }
            try{
                String sql="select [CUSTOMER NAME] from data where [ACCOUNT NO]="+jComboBox7.getSelectedItem()+"";
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                while (rs.next()) {
                    jTextField9.setText(rs.getString(1));
                }
            }
            catch(SQLException ex)
            {

            }
        }

        }
    }//GEN-LAST:event_jButton7KeyPressed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Newmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Newmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Newmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Newmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Newmain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea Address;
    private javax.swing.JPanel DELETEACC;
    private javax.swing.JPanel EDITACC;
    public javax.swing.JComboBox PAYCOMBO;
    private javax.swing.JLabel acfiedl;
    private javax.swing.JPanel addaccpanel;
    private javax.swing.JPanel addbot;
    private javax.swing.JLabel addlable;
    private javax.swing.JPanel addpay;
    public javax.swing.JLabel confield;
    private javax.swing.JLabel conlable;
    public javax.swing.JLabel cusfiedl;
    private javax.swing.JLabel cusname;
    private javax.swing.JLabel cusname1;
    private javax.swing.JPanel customerdata;
    public javax.swing.JLabel dafiedl;
    private javax.swing.JLabel dalable;
    private javax.swing.JPanel delgal;
    private javax.swing.JPanel deltepay;
    private javax.swing.JPanel editgpanel;
    public javax.swing.JPanel editppanel;
    private javax.swing.JButton enter;
    public javax.swing.JLabel gallonbalancefield;
    public javax.swing.JTable gallontab;
    private javax.swing.JLabel gb;
    private javax.swing.JLabel gbfield;
    private javax.swing.JLabel gc;
    public javax.swing.JLabel gdfield;
    private javax.swing.JLabel gdlable;
    public javax.swing.JLabel grfield;
    private javax.swing.JLabel grlable;
    private javax.swing.JTextField input;
    public javax.swing.JLabel itemstate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    public javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    public javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    public javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTable jTable2;
    public javax.swing.JTable jTable3;
    public javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    public javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    public javax.swing.JTextField jTextField6;
    public javax.swing.JTextField jTextField7;
    public javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel list;
    private javax.swing.JLabel noaccount;
    private javax.swing.JLabel pa;
    public javax.swing.JLabel pafiedlds;
    private javax.swing.JLabel palable;
    private javax.swing.JScrollPane pasmdas;
    private javax.swing.JScrollPane paymenttab;
    private javax.swing.JPanel paypanel;
    private javax.swing.JLabel pc;
    public javax.swing.JLabel tafield;
    private javax.swing.JLabel talable;
    private javax.swing.JLabel totallable;
    // End of variables declaration//GEN-END:variables
}
